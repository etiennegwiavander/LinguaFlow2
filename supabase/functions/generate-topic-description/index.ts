// @ts-ignore: Deno import for Edge Function
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
// @ts-ignore: Deno npm import
import { createClient } from "npm:@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

interface GenerateDescriptionRequest {
  student_id: string;
  topic_title: string;
}

interface Student {
  id: string;
  name: string;
  target_language: string;
  native_language: string | null;
  level: string;
  age_group?: string;
  end_goals: string | null;
  learning_styles: string[] | null;
}

// AI-powered topic description generator using Gemini API
async function generateTopicDescription(
  student: Student,
  topicTitle: string
): Promise<string> {
  console.log('ü§ñ Generating topic description using Gemini API');
  
  try {
    // Get Gemini API key from environment
    const geminiApiKey = Deno.env.get("GEMINI_API_KEY");
    if (!geminiApiKey) {
      throw new Error("GEMINI_API_KEY not found in environment variables");
    }

    // Call Gemini API with topic-specific prompt
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `Write a compelling, personalized topic description for "${topicTitle}" for a ${student.level.toUpperCase()} level ${student.target_language} learner named ${student.name}.

Student Profile:
- Name: ${student.name}
- Level: ${student.level.toUpperCase()}
- Target Language: ${student.target_language}
- Age Group: ${student.age_group || 'Adult'}
- Learning Goals: ${student.end_goals || 'General fluency'}

Requirements:
1. Make it specific to the topic "${topicTitle}" - avoid generic language learning descriptions
2. Explain what makes this topic interesting and relevant
3. Mention specific aspects they'll explore (not just "vocabulary and grammar")
4. Make it engaging and motivational
5. Keep it 2-3 sentences, around 50-80 words
6. Don't use phrases like "explore through conversation practice" or "tailored to your level"
7. Focus on the real-world relevance and interesting aspects of the topic

Examples of good descriptions:
- For "Food and Cooking": "Discover the stories behind your favorite dishes, from family recipes passed down through generations to the cultural significance of different cuisines. You'll share cooking disasters, memorable meals, and food traditions that connect us all."
- For "Travel and Adventure": "Journey through unforgettable travel experiences, from spontaneous adventures to carefully planned trips that changed your perspective. Discuss the people you've met, places that surprised you, and how travel shapes who we are."

Topic: ${topicTitle}`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 200,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      throw new Error('No content generated by Gemini API');
    }

    console.log('‚úÖ Generated topic description using Gemini API');
    return generatedText.trim();

  } catch (error) {
    console.error('‚ùå Gemini API failed for description:', error);
    
    // Fallback to a simple but topic-specific description
    const fallbackDescriptions = {
      'food': `Dive into the world of flavors, cooking adventures, and food memories that shape our lives and cultures.`,
      'travel': `Share travel stories, cultural discoveries, and the transformative power of exploring new places.`,
      'technology': `Explore how technology impacts our daily lives, relationships, and the way we see the world.`,
      'work': `Discuss career journeys, workplace challenges, and what makes work meaningful and fulfilling.`,
      'health': `Talk about wellness, fitness goals, and the mind-body connection in our daily lives.`,
      'family': `Share family stories, traditions, and the relationships that shape who we are.`,
      'education': `Explore learning experiences, memorable teachers, and how education transforms us.`
    };
    
    const topicLower = topicTitle.toLowerCase();
    for (const [key, desc] of Object.entries(fallbackDescriptions)) {
      if (topicLower.includes(key)) {
        return desc;
      }
    }
    
    return `Engage in meaningful conversations about ${topicTitle} and discover new perspectives through personal stories and experiences.`;
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    console.log("üöÄ Generate Topic Description function called");

    // Parse request body
    const { student_id, topic_title }: GenerateDescriptionRequest =
      await req.json();

    // Validate required fields
    if (!student_id || !topic_title) {
      return new Response(
        JSON.stringify({
          success: false,
          error: "Missing required fields: student_id and topic_title",
        }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get student information
    console.log("üìö Fetching student information...");
    const { data: student, error: studentError } = await supabase
      .from("students")
      .select("*")
      .eq("id", student_id)
      .single();

    if (studentError || !student) {
      console.error("‚ùå Student fetch error:", studentError);
      return new Response(
        JSON.stringify({
          success: false,
          error: "Student not found",
        }),
        {
          status: 404,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log("‚úÖ Student found:", student.name);

    // Generate personalized description
    console.log("üìù Generating topic description...");
    const description = await generateTopicDescription(student, topic_title);

    console.log("‚úÖ Description generated successfully");

    return new Response(
      JSON.stringify({
        success: true,
        description: description,
        message: `Generated description for "${topic_title}"`,
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("üí• Function error:", error);

    return new Response(
      JSON.stringify({
        success: false,
        error:
          error instanceof Error ? error.message : "Unknown error occurred",
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});
